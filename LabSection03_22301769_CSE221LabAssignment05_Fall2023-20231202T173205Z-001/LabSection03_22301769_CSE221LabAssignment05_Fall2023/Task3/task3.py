# -*- coding: utf-8 -*-
"""Task3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Mr_nOvCd87I9FBDb7Qv3xtSt-114EdyH
"""

from collections import defaultdict
class Graph:
    def __init__(self, vrtcs):
        self.V = vrtcs
        self.graph = defaultdict(list)

    def addEdge(self, u, v):
        self.graph[u].append(v)

    def DFS(self, v, visit, f):
        visit[v] = True
        f.write(str(v) + ' ')
        for i in self.graph[v]:
            if visit[i] == False:
                self.DFS(i, visit, f)

    def fill_order(self, v, visit, stack):
        visit[v] = True
        for i in self.graph[v]:
            if visit[i] == False:
                self.fill_order(i, visit, stack)
        stack = stack.append(v)

    def trnsps(self):
        g = Graph(self.V)
        for i in self.graph:
            for j in self.graph[i]:
                g.addEdge(j, i)
        return g

    def prntSCCs(self, f):
        stack = []
        visit =[False]*(self.V+1)
        for i in range(1, self.V+1):
            if visit[i] == False:
                self.fill_order(i, visit, stack)
        gr = self.trnsps()
        visit =[False]*(self.V+1)
        while stack:
            i = stack.pop()
            if visit[i] == False:
                gr.DFS(i, visit, f)
                f.write('\n')

inf = open('input3.txt', 'r')
outf = open("output3.txt", "w")
vrtcs, edgs = map(int, inf.readline().split())
g = Graph(vrtcs)

for _ in range(edgs):
    u, v = map(int, inf.readline().split())
    g.addEdge(u, v)

g.prntSCCs(outf)
inf.close()
outf.close()