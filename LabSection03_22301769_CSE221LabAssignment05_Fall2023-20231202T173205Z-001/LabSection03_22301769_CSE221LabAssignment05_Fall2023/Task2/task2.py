# -*- coding: utf-8 -*-
"""Task2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Mr_nOvCd87I9FBDb7Qv3xtSt-114EdyH
"""

import heapq
inf = open("input2.txt", "r")
outf = open("output2.txt", "w")
v, e = list(map(int, inf.readline().strip().split()))
adj_list = [[] for i in range(v+1)]
visit = [0 for i in range(v+1)]
visit_cycle = [0 for i in range(v+1)]
indgree = [0 for i in range(v+1)]

def BFS_tplgcl_srt(adj_list, indgreee):
    queue = []
    for i in range(1, (v+1)):
        if indgree[i] == 0:
            heapq.heappush(queue, i)
    result = []
    while queue:
        temp = heapq.heappop(queue)
        result.append(temp)
        for ad_nd in adj_list[temp]:
            indgree[ad_nd] -= 1
            if indgree[ad_nd] == 0:
                heapq.heappush(queue, ad_nd)
    return result

def cycle_dtct(selected):
    visit_cycle[selected] = 1
    for ad_nd in adj_list[selected]:
        if visit_cycle[ad_nd] == 0:
            got_cycle = cycle_dtct(ad_nd)
            if(got_cycle):
                return True
        elif visit_cycle[ad_nd] == 1:
            return True

    visit_cycle[selected] = 2
    return False

for i in range(1, (e+1)):
    f, t = list(map(int, inf.readline().strip().split()))
    adj_list[f].append(t)
    indgree[t] += 1

cycle_exst = False
for i in range(1, v+1):
    if visit_cycle[i] == 0:
        is_cyclic= cycle_dtct(i)
        if is_cyclic:
            cycle_exst = True
            break

if cycle_exst:
    print("IMMPOSSIBLE", file=outf)
else:
    print(*BFS_tplgcl_srt(adj_list, indgree), file=outf)
inf.close()
outf.close()