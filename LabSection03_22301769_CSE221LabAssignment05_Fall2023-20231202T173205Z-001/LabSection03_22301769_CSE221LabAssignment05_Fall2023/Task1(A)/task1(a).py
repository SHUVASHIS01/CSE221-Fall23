# -*- coding: utf-8 -*-
"""Task1(a).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Mr_nOvCd87I9FBDb7Qv3xtSt-114EdyH
"""

from collections import defaultdict, deque
inf = open('input1a.txt', 'r')
outf = open('output1a.txt', 'w')
v, e = map(int, inf.readline().split())
prqsts = [tuple(map(int, inf.readline().split())) for _ in range(e)]

def DFS_tplgcl_srt(graph, v):
    visit = [False] * (v + 1)
    stack = []
    for i in range(1, v + 1):
        if not visit[i]:
            dfs(graph, i, visit, stack)
    return stack[::-1]

def BFS_tplgcl_srt(graph, in_degree, v):
    queue = deque()

    for i in range(1, v + 1):
        if in_degree[i] == 0:
            queue.append(i)
    ordr = []

    while queue:
        nd = queue.popleft()
        ordr.append(nd)

        for neighbr in graph[nd]:
            in_degree[neighbr] -= 1
            if in_degree[neighbr] == 0:
                queue.append(neighbr)

    return ordr if len(ordr) == v else "IMPOSSIBLE"

def course_ordr_bfs(v, prqsts):
    graph = defaultdict(list)
    in_degree = [0] * (v + 1)

    for prerequisite in prqsts:
        graph[prerequisite[0]].append(prerequisite[1])
        in_degree[prerequisite[1]] += 1

    ordr = BFS_tplgcl_srt(graph, in_degree, v)
    return ordr

ordr_bfs = course_ordr_bfs(v, prqsts)
outf.write(" ".join(map(str, ordr_bfs)) + "\n")
inf.close()
outf.close()