# -*- coding: utf-8 -*-
"""Task2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-qCDcd7HPu9WDt7sxRYf-QM0vx3oIiZS
"""

import math
import heapq
inf = open("input2.txt", 'r')
outf = open("output2.txt", 'w')
v, e = list(map(int, inf.readline().strip().split()))
ad_l= [[] for i in range(v+1)]
vstd_alice = [0 for j in range(v+1)]
vstd_bob = [0 for j in range(v+1)]
dist_alice = [math.inf for k in range(v+1)]
dist_bob = [math.inf for k in range(v+1)]

def dijkstra(source, vstd, dist):
    dist[source] = 0
    pq = []
    heapq.heappush(pq, (0, source))
    while pq:
        dst, node = heapq.heappop(pq)
        if vstd[node] == 1:
            continue
        vstd[node] = 1
        for ad_nd, edge_cost in ad_l[node]:
            if dist[ad_nd] > dist[node] + edge_cost:
                dist[ad_nd] = dist[node] + edge_cost
                heapq.heappush(pq, (dist[ad_nd], ad_nd))

for i in range(e):
    f, t, w = list(map(int, inf.readline().strip().split()))
    ad_l[f].append((t, w))

alice, bob = list(map(int, inf.readline().strip().split()))
by_alice = dijkstra(alice, vstd_alice, dist_alice)
by_bob = dijkstra(bob, vstd_bob, dist_bob)
impossible = True
dstnc = math.inf
for i in range(1, v+1):
    if vstd_alice[i] == 1 and vstd_bob[i] == 1:
        impossible = False
        if dstnc > min(dstnc, max(dist_alice[i], dist_bob[i])):
            dstnc = min(dstnc, max(dist_alice[i], dist_bob[i]))
            node = i
if impossible == True:
    print("IMPOSSIBLE")
else:
    print(f"Time {dstnc}", file=outf)
    print(f"Node {node}", file=outf)

inf.close()
outf.close()